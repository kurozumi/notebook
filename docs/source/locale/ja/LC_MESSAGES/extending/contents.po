# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Team, https://jupyter.org
# This file is distributed under the same license as the Jupyter Notebook
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Jupyter Notebook 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-24 20:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../source/extending/contents.rst:4
msgid "Contents API"
msgstr ""

#: ../../source/extending/contents.rst:8
msgid ""
"The Jupyter Notebook web application provides a graphical interface for "
"creating, opening, renaming, and deleting files in a virtual filesystem."
msgstr ""

#: ../../source/extending/contents.rst:11
msgid ""
"The :class:`~manager.ContentsManager` class defines an abstract API for "
"translating these interactions into operations on a particular storage "
"medium. The default implementation, "
":class:`~filemanager.FileContentsManager`, uses the local filesystem of "
"the server for storage and straightforwardly serializes notebooks into "
"JSON.  Users can override these behaviors by supplying custom subclasses "
"of ContentsManager."
msgstr ""

#: ../../source/extending/contents.rst:19
msgid ""
"This section describes the interface implemented by ContentsManager "
"subclasses. We refer to this interface as the **Contents API**."
msgstr ""

#: ../../source/extending/contents.rst:23
msgid "Data Model"
msgstr ""

#: ../../source/extending/contents.rst:28
msgid "Filesystem Entities"
msgstr ""

#: ../../source/extending/contents.rst:31
msgid ""
"ContentsManager methods represent virtual filesystem entities as "
"dictionaries, which we refer to as **models**."
msgstr ""

#: ../../source/extending/contents.rst:34
msgid "Models may contain the following entries:"
msgstr ""

#: ../../source/extending/contents.rst:37
msgid "Key"
msgstr ""

#: ../../source/extending/contents.rst:37
msgid "Type"
msgstr ""

#: ../../source/extending/contents.rst:37
msgid "Info"
msgstr ""

#: ../../source/extending/contents.rst:39
msgid "**name**"
msgstr ""

#: ../../source/extending/contents.rst:39
#: ../../source/extending/contents.rst:41
#: ../../source/extending/contents.rst:45
msgid "unicode"
msgstr ""

#: ../../source/extending/contents.rst:39
msgid "Basename of the entity."
msgstr ""

#: ../../source/extending/contents.rst:41
msgid "**path**"
msgstr ""

#: ../../source/extending/contents.rst:41
msgid "Full (:ref:`API-style<apipaths>`) path to the entity."
msgstr ""

#: ../../source/extending/contents.rst:45
msgid "**type**"
msgstr ""

#: ../../source/extending/contents.rst:45
msgid ""
"The entity type. One of ``\"notebook\"``, ``\"file\"`` or "
"``\"directory\"``."
msgstr ""

#: ../../source/extending/contents.rst:49
msgid "**created**"
msgstr ""

#: ../../source/extending/contents.rst:49
#: ../../source/extending/contents.rst:51
msgid "datetime"
msgstr ""

#: ../../source/extending/contents.rst:49
msgid "Creation date of the entity."
msgstr ""

#: ../../source/extending/contents.rst:51
msgid "**last_modified**"
msgstr ""

#: ../../source/extending/contents.rst:51
msgid "Last modified date of the entity."
msgstr ""

#: ../../source/extending/contents.rst:54
msgid "**content**"
msgstr ""

#: ../../source/extending/contents.rst:54
msgid "variable"
msgstr ""

#: ../../source/extending/contents.rst:54
msgid "The \"content\" of the entity. (:ref:`See Below<modelcontent>`)"
msgstr ""

#: ../../source/extending/contents.rst:58
msgid "**mimetype**"
msgstr ""

#: ../../source/extending/contents.rst:58
#: ../../source/extending/contents.rst:62
msgid "unicode or ``None``"
msgstr ""

#: ../../source/extending/contents.rst:58
msgid "The mimetype of ``content``, if any.  (:ref:`See Below<modelcontent>`)"
msgstr ""

#: ../../source/extending/contents.rst:62
msgid "**format**"
msgstr ""

#: ../../source/extending/contents.rst:62
msgid "The format of ``content``, if any. (:ref:`See Below<modelcontent>`)"
msgstr ""

#: ../../source/extending/contents.rst:69
msgid ""
"Certain model fields vary in structure depending on the ``type`` field of"
" the model. There are three model types: **notebook**, **file**, and "
"**directory**."
msgstr ""

#: ../../source/extending/contents.rst:78
msgid "``notebook`` models"
msgstr ""

#: ../../source/extending/contents.rst:73
#: ../../source/extending/contents.rst:90
msgid "The ``format`` field is always ``\"json\"``."
msgstr ""

#: ../../source/extending/contents.rst:74
#: ../../source/extending/contents.rst:91
msgid "The ``mimetype`` field is always ``None``."
msgstr ""

#: ../../source/extending/contents.rst:75
msgid ""
"The ``content`` field contains a "
":class:`nbformat.notebooknode.NotebookNode` representing the .ipynb file "
"represented by the model.  See the `NBFormat`_ documentation for a full "
"description."
msgstr ""

#: ../../source/extending/contents.rst:87
msgid "``file`` models"
msgstr ""

#: ../../source/extending/contents.rst:81
msgid "The ``format`` field is either ``\"text\"`` or ``\"base64\"``."
msgstr ""

#: ../../source/extending/contents.rst:82
msgid ""
"The ``mimetype`` field is ``text/plain`` for text-format models and "
"``application/octet-stream`` for base64-format models."
msgstr ""

#: ../../source/extending/contents.rst:84
msgid ""
"The ``content`` field is always of type ``unicode``.  For text-format "
"file models, ``content`` simply contains the file's bytes after decoding "
"as UTF-8.  Non-text (``base64``) files are read as bytes, base64 encoded,"
" and then decoded as UTF-8."
msgstr ""

#: ../../source/extending/contents.rst:93
msgid "``directory`` models"
msgstr ""

#: ../../source/extending/contents.rst:92
msgid ""
"The ``content`` field contains a list of :ref:`content-free<contentfree>`"
" models representing the entities in the directory."
msgstr ""

#: ../../source/extending/contents.rst:99
msgid ""
"In certain circumstances, we don't need the full content of an entity to "
"complete a Contents API request.  In such cases, we omit the "
"``mimetype``, ``content``, and ``format`` keys from the model. This most "
"commonly occurs when listing a directory, in which circumstance we "
"represent files within the directory as content-less models to avoid "
"having to recursively traverse and serialize the entire filesystem."
msgstr ""

#: ../../source/extending/contents.rst:106
msgid "**Sample Models**"
msgstr ""

#: ../../source/extending/contents.rst:149
msgid "API Paths"
msgstr ""

#: ../../source/extending/contents.rst:152
msgid ""
"ContentsManager methods represent the locations of filesystem resources "
"as **API-style paths**.  Such paths are interpreted as relative to the "
"root directory of the notebook server.  For compatibility across systems,"
" the following guarantees are made:"
msgstr ""

#: ../../source/extending/contents.rst:157
msgid "Paths are always ``unicode``, not ``bytes``."
msgstr ""

#: ../../source/extending/contents.rst:158
msgid "Paths are not URL-escaped."
msgstr ""

#: ../../source/extending/contents.rst:159
msgid "Paths are always forward-slash (/) delimited, even on Windows."
msgstr ""

#: ../../source/extending/contents.rst:160
msgid ""
"Leading and trailing slashes are stripped.  For example, "
"``/foo/bar/buzz/`` becomes ``foo/bar/buzz``."
msgstr ""

#: ../../source/extending/contents.rst:162
msgid "The empty string (``\"\"``) represents the root directory."
msgstr ""

#: ../../source/extending/contents.rst:166
msgid "Writing a Custom ContentsManager"
msgstr ""

#: ../../source/extending/contents.rst:168
msgid ""
"The default ContentsManager is designed for users running the notebook as"
" an application on a personal computer.  It stores notebooks as .ipynb "
"files on the local filesystem, and it maps files and directories in the "
"Notebook UI to files and directories on disk.  It is possible to override"
" how notebooks are stored by implementing your own custom subclass of "
"``ContentsManager``. For example, if you deploy the notebook in a context"
" where you don't trust or don't have access to the filesystem of the "
"notebook server, it's possible to write your own ContentsManager that "
"stores notebooks and files in a database."
msgstr ""

#: ../../source/extending/contents.rst:179
msgid "Required Methods"
msgstr ""

#: ../../source/extending/contents.rst:181
msgid ""
"A minimal complete implementation of a custom "
":class:`~manager.ContentsManager` must implement the following methods:"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.get "
"<notebook.services.contents.manager.ContentsManager.get>`\\ \\(path\\[\\,"
" content\\, type\\, \\.\\.\\.\\]\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Get a file or directory model."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.save "
"<notebook.services.contents.manager.ContentsManager.save>`\\ \\(model\\, "
"path\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Save a file or directory model to path."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.delete_file "
"<notebook.services.contents.manager.ContentsManager.delete_file>`\\ "
"\\(path\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Delete the file or directory at path."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.rename_file "
"<notebook.services.contents.manager.ContentsManager.rename_file>`\\ "
"\\(old\\_path\\, new\\_path\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Rename a file or directory."
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.file_exists "
"<notebook.services.contents.manager.ContentsManager.file_exists>`\\ "
"\\(\\[path\\]\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Does a file exist at the given path?"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.dir_exists "
"<notebook.services.contents.manager.ContentsManager.dir_exists>`\\ "
"\\(path\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Does a directory exist at the given path?"
msgstr ""

#: ../../<autosummary>:1
msgid ""
":obj:`ContentsManager.is_hidden "
"<notebook.services.contents.manager.ContentsManager.is_hidden>`\\ "
"\\(path\\)"
msgstr ""

#: ../../<autosummary>:1
msgid "Is path a hidden directory or file?"
msgstr ""

#: ../../source/extending/contents.rst:196
msgid "Customizing Checkpoints"
msgstr ""

#: ../../source/extending/contents.rst:198
msgid "TODO:"
msgstr ""

#: ../../source/extending/contents.rst:202
msgid "Testing"
msgstr ""

#: ../../source/extending/contents.rst:205
msgid ""
":mod:`notebook.services.contents.tests` includes several test suites "
"written against the abstract Contents API.  This means that an excellent "
"way to test a new ContentsManager subclass is to subclass our tests to "
"make them use your ContentsManager."
msgstr ""

#: ../../source/extending/contents.rst:212
msgid ""
"PGContents_ is an example of a complete implementation of a custom "
"``ContentsManager``.  It stores notebooks and files in PostgreSQL_ and "
"encodes directories as SQL relations.  PGContents also provides an "
"example of how to re-use the notebook's tests."
msgstr ""

